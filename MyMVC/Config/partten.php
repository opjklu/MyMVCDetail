<?php
/**
 *正则 说明 
 */
return array(
   'show' =>array(
        '$'     =>	'匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$',
        '( )'	=>  '标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)',
        '*'	    =>  '匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*',
        '+'	    =>  '匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+',
        '.'	    =>  '匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \.',
        '['	    =>  '标记一个中括号表达式的开始。要匹配 [，请使用 \[',
        '?'     =>	'匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?',
        '‘\’'	=>  '将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\\’ 匹配 “\”，而 ‘\(’ 则匹配 “(”',
        '^'	    =>  '匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^',
        '{'	    =>  '标记限定符表达式的开始。要匹配 {，请使用 \{',
        '|'     =>	 '指明两项之间的一个选择。要匹配 |，请使用 \|'
       ),
    'detail' => array(
        '*'	    => '匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。',
        '+'	    => '匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。',
        '?'	    => '匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。',
        '{n}'   => 'n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。',
        '{n,}'  => 'n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。',
        '{n,m}' => 'm 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。',
        'b'     => ' 用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，\b描述单词的前或后边界，\B表示非单词边界。不能对定位符使用限定符。 ',
        'select'=> '选择 : 用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。
                                         但用圆括号会有一个副作用，是相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。
　　                                  其中?:是非捕获元之一，还有两个非捕获元是?=和?!，这两个还有更多的含义，前者为正向预查，
                                         在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串',
    )
);